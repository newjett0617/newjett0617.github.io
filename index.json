[{"content":"紀錄一下最近為了申請「租金補貼」而跑一場大地遊戲的過程\n租金補貼自檢表 政府住宅補貼資格檢視 \u0026lt;- 這個網站是用來檢視是否符合申請資格，透過填寫實際參數及勾選選項就可以明白自己是否有符合申請資格\n(家庭成員人數) 申請人是我，我沒有配偶，我的家庭成員有「戶籍內直系親屬（父母）」，共三人\n(持有住宅) 我的情況是「家庭成員有持有住宅」，父母持有住宅，那棟房子在老家，不在租賃住宅所在地，申請租金補貼的條件是家庭成員不能持有住宅，因此需要辦理「同址分戶」，我要離開原本的戶籍，並成立新的戶籍，新戶籍地點則是在原本住址\n同只分戶 辦理「同址分戶」需要到「戶籍地」的「戶政事務所」進行辦理\n需要準備「戶口名簿」、「身分證」、「申請人簽名或印章」及「證件」\n「證件」這部分挺麻煩的，需要「房屋所有權狀」或「最近一期的房屋完稅稅單」，由於房子在一百多年前就蓋好了，當時有可能沒有文件證明，因此只有找到「土地權狀」沒有「房屋權狀」，家裡也好久沒有繳房屋稅了，根本沒有房屋稅單，於是就拿土地權狀去申辦，哈哈哈承辦人員當然拒絕辦理ＸＤ，不過他很好心地幫我向地政調閱資料\n其實「證件」可以拿「本人、配偶、直系血親、直系姻親所繳納最近6個月內之水、電、瓦斯費收據」，只要證明地址就行了\n於是我就成功辦理「同址分戶」了，費用花了 60 元（申請兩份戶口名簿）\n這樣「租金補貼」選項就需要更改一下，家庭成員人數變成一人，家庭成員沒有持有住宅，其他的動產、不動產、每人每月平均所得都有符合規定（默默地掉眼淚 \u0026hellip; QAQ）\n相關文件 再來就需要附上「租金補貼」的相關文件\n 「申請書（書面 or 線上）」 「戶口名簿」 「身分證正反面」 「郵局存摺封面」 「租約」（需要有房東的身分證號碼） 「合法建物證明文件」（去租賃處的地政事務所申請「第二類建物謄本」即可，如果是給「地址」查詢的話，手續費需要 40 元，如果是給「建號」查詢的話，則需要 20 元）   參考資料:\n https://youtu.be/sS6sBaX4wQw https://www.ris.gov.tw/documents/html/2/3/4/396.html  ","permalink":"https://newjett0617.github.io/posts/20210829-%E7%94%B3%E8%AB%8B%E7%A7%9F%E9%87%91%E8%A3%9C%E8%B2%BC/","summary":"紀錄一下最近為了申請「租金補貼」而跑一場大地遊戲的過程\n租金補貼自檢表 政府住宅補貼資格檢視 \u0026lt;- 這個網站是用來檢視是否符合申請資格，透過填寫實際參數及勾選選項就可以明白自己是否有符合申請資格\n(家庭成員人數) 申請人是我，我沒有配偶，我的家庭成員有「戶籍內直系親屬（父母）」，共三人\n(持有住宅) 我的情況是「家庭成員有持有住宅」，父母持有住宅，那棟房子在老家，不在租賃住宅所在地，申請租金補貼的條件是家庭成員不能持有住宅，因此需要辦理「同址分戶」，我要離開原本的戶籍，並成立新的戶籍，新戶籍地點則是在原本住址\n同只分戶 辦理「同址分戶」需要到「戶籍地」的「戶政事務所」進行辦理\n需要準備「戶口名簿」、「身分證」、「申請人簽名或印章」及「證件」\n「證件」這部分挺麻煩的，需要「房屋所有權狀」或「最近一期的房屋完稅稅單」，由於房子在一百多年前就蓋好了，當時有可能沒有文件證明，因此只有找到「土地權狀」沒有「房屋權狀」，家裡也好久沒有繳房屋稅了，根本沒有房屋稅單，於是就拿土地權狀去申辦，哈哈哈承辦人員當然拒絕辦理ＸＤ，不過他很好心地幫我向地政調閱資料\n其實「證件」可以拿「本人、配偶、直系血親、直系姻親所繳納最近6個月內之水、電、瓦斯費收據」，只要證明地址就行了\n於是我就成功辦理「同址分戶」了，費用花了 60 元（申請兩份戶口名簿）\n這樣「租金補貼」選項就需要更改一下，家庭成員人數變成一人，家庭成員沒有持有住宅，其他的動產、不動產、每人每月平均所得都有符合規定（默默地掉眼淚 \u0026hellip; QAQ）\n相關文件 再來就需要附上「租金補貼」的相關文件\n 「申請書（書面 or 線上）」 「戶口名簿」 「身分證正反面」 「郵局存摺封面」 「租約」（需要有房東的身分證號碼） 「合法建物證明文件」（去租賃處的地政事務所申請「第二類建物謄本」即可，如果是給「地址」查詢的話，手續費需要 40 元，如果是給「建號」查詢的話，則需要 20 元）   參考資料:\n https://youtu.be/sS6sBaX4wQw https://www.ris.gov.tw/documents/html/2/3/4/396.html  ","title":"申請租金補貼"},{"content":"Hugo 內建支援使用 Disqus 當作第三方留言系統，但我偏好使用 GitHub issue，於是找到 Utterances 當作第三方留言系統\n安裝 提供一個存放留言的 repo，我是使用 github page repo，所以不用建立新的 repo\n再來安裝 utterances app\n選擇 repo，查看一下要求的權限，沒問題後進行安裝\n接下來，根據使用不同主題有不同的配置方式，我的主題是 hugo-PaperMod\n新增 layouts/partials/comments.html 檔案，如果檔案或資料夾不存在的話就新增\n貼上 utterances 的 javascript 腳本\n\u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;[owner/repo]\u0026#34; issue-term=\u0026#34;title\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 大功告成，底下留言測試一下\n 參考資料:\n https://gohugo.io/content-management/comments/  ","permalink":"https://newjett0617.github.io/posts/20210826-hugo-%E7%95%99%E8%A8%80%E7%B3%BB%E7%B5%B1/","summary":"Hugo 內建支援使用 Disqus 當作第三方留言系統，但我偏好使用 GitHub issue，於是找到 Utterances 當作第三方留言系統\n安裝 提供一個存放留言的 repo，我是使用 github page repo，所以不用建立新的 repo\n再來安裝 utterances app\n選擇 repo，查看一下要求的權限，沒問題後進行安裝\n接下來，根據使用不同主題有不同的配置方式，我的主題是 hugo-PaperMod\n新增 layouts/partials/comments.html 檔案，如果檔案或資料夾不存在的話就新增\n貼上 utterances 的 javascript 腳本\n\u0026lt;script src=\u0026#34;https://utteranc.es/client.js\u0026#34; repo=\u0026#34;[owner/repo]\u0026#34; issue-term=\u0026#34;title\u0026#34; theme=\u0026#34;github-light\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; async\u0026gt; \u0026lt;/script\u0026gt; 大功告成，底下留言測試一下\n 參考資料:\n https://gohugo.io/content-management/comments/  ","title":"Hugo 留言系統"},{"content":"邊際效用 Marginal Utility 假設你正在吃太妃糖，你很愛，這糖果為你帶來很大的滿足，但如果吃下更多的糖，你多吃 1 顆糖得到的歡愉就沒這麼高了\n10 顆之後還不錯，但不像第一顆這麼甜美，吃完 15 顆之後，你開始覺得厭倦，吃 20 顆可能沒有獲得其他歡愉的感覺\n因此，「邊際」指的是某種事物的「邊緣」\n從太妃糖得到的「邊緣」效用，指的是最後一顆糖果給你的效用，當消費越多，邊際效用則會遞減，稱之「邊際效用遞減法則」\n舉例 假設你有 100 元可以消費，可以買熱狗，也可以買可樂\n假設要一次消費把這筆錢花掉，那你要買幾支熱狗，幾瓶可樂？\n如果一次買 10 支熱狗，第 10 支的邊際效用將會極低 (可以說，吃了 10 支熱狗身體會不舒服)\n如果此時加 1 瓶可樂，少 1 支熱狗的話，可樂增加的邊際效用會高於熱狗 (可以解渴)\n當在多拿可樂、少拿熱狗的同時，可樂的邊際效用在降低 (因為可樂越來越多)、熱狗的邊際效用在提高 (因為熱狗越來越少)\n找出邊際效用的平衡點 此模型的關鍵因素是「稀少性」的問題，剛才的熱狗、可樂例子中並沒有考慮價格，現實生活中錢是有限的，因此，需求法則會影響結果\n 參考資料:\n 經濟學的 40 堂公開課  ","permalink":"https://newjett0617.github.io/posts/20210815-%E9%82%8A%E9%9A%9B%E6%95%88%E7%94%A8/","summary":"邊際效用 Marginal Utility 假設你正在吃太妃糖，你很愛，這糖果為你帶來很大的滿足，但如果吃下更多的糖，你多吃 1 顆糖得到的歡愉就沒這麼高了\n10 顆之後還不錯，但不像第一顆這麼甜美，吃完 15 顆之後，你開始覺得厭倦，吃 20 顆可能沒有獲得其他歡愉的感覺\n因此，「邊際」指的是某種事物的「邊緣」\n從太妃糖得到的「邊緣」效用，指的是最後一顆糖果給你的效用，當消費越多，邊際效用則會遞減，稱之「邊際效用遞減法則」\n舉例 假設你有 100 元可以消費，可以買熱狗，也可以買可樂\n假設要一次消費把這筆錢花掉，那你要買幾支熱狗，幾瓶可樂？\n如果一次買 10 支熱狗，第 10 支的邊際效用將會極低 (可以說，吃了 10 支熱狗身體會不舒服)\n如果此時加 1 瓶可樂，少 1 支熱狗的話，可樂增加的邊際效用會高於熱狗 (可以解渴)\n當在多拿可樂、少拿熱狗的同時，可樂的邊際效用在降低 (因為可樂越來越多)、熱狗的邊際效用在提高 (因為熱狗越來越少)\n找出邊際效用的平衡點 此模型的關鍵因素是「稀少性」的問題，剛才的熱狗、可樂例子中並沒有考慮價格，現實生活中錢是有限的，因此，需求法則會影響結果\n 參考資料:\n 經濟學的 40 堂公開課  ","title":"邊際效用"},{"content":"在 kubernetes 官網 中有看到一個用來管理 kubernetes 的工具，叫做 Kustomize，透過 kustomization 檔案來宣告式 ( Declarative) 管理 kubernetes 物件\n安裝 Kustomize 從 kubernetes 1.14 之後就有支援 kustomization 檔案\nkubectl kustomize DIR [flags] [options] DIR 目錄下，必須有 kustomization 檔案，名稱可以為下列三個其中一個\n kustomization.yaml kustomization.yml Kustomization  但是也可以獨立安裝 kustomize-cli，其他安裝方式請看 here\nbrew install kustomize Kustomize 工作原理 主要分成 base 及 overlays\nbase 會透過 kustomization 檔案定義使用的哪些 kubernetes 物件\noverlays 也會透過 kustomization 檔案定義要使用哪個 base，並在 base 上新增補丁 (Patch)，如果在 base 上有該資源的話就複寫，如果沒有的話就新增\n資料夾結構如下\n. ├── base │ ├── configMap.yaml │ ├── deployment.yaml │ ├── kustomization.yaml │ └── service.yaml └── overlays ├── dev │ ├── index2.html │ └── kustomization.yaml └── prod ├── kustomization.yaml └── replica_count.yaml 部署 Kustomize 資源 有兩種方式部署到 kubernetes 中\n使用 kustomize build 會產生 kubernetes 物件，然後在 apply 到 kubernetes 中\nkustomize build DIR | kubectl apply -f - 或是使用 kubectl apply 搭配 -k 或 --kustomize 參數即可\nkubectl apply -k DIR Kustomize HelloWorld Example 範例 repo\n建立 base 在 base 資料夾中有三個 kubernetes 物件及一個 kustomization 檔案\n部署 base 資源\nkubectl apply -k base/ 查看一下剛部署的資源\nkubectl get -k base/ NAME DATA AGE configmap/index 1 14m NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/nginx ClusterIP 10.96.75.87 \u0026lt;none\u0026gt; 8080/TCP 14m NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/nginx 1/1 1 1 14m 確認一下功能是否正常\ncurl 10.96.75.87:8080/index.html this is index.html 有成功吃到 configMap 的檔案\n建立 overlays overlays 中有兩個版本 (dev 及 prod)，在 dev 中會多掛載 index2.html 檔案，在 prod 中會調整 replica 數量\n先部署 prod 版本\nkubectl apply -k overlays/prod 查看一下剛部署的資源\nkubectl get -k overlays/prod NAME DATA AGE configmap/prod-index 1 24s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/prod-nginx ClusterIP 10.96.19.201 \u0026lt;none\u0026gt; 8080/TCP 24s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/prod-nginx 3/3 3 3 24s 會看到除了每個資源有 prefix 外，replica 數量從原本 1 變成 3\nconfigmapGenerator \u0026amp; secretGenerator kustomize 有提供產生 configmap 及 secret 的 kubernetes 物件，叫做 configmapGenerator 及 secretGenerator，這兩個功能是類似的\n當中有一個參數 behavior 可以允許 overlays 修改或替換已存在的 configmap 或是 secret，這邊就用 dev 版本演示一下\n部署 dev 版本\nkubectl apply -k overlays/dev 查看一下剛部署的資源\nkubectl get -k overlays/dev NAME DATA AGE configmap/dev-index 2 10s NAME TYPE CLUSTER-IP EXTERNAL-IP PORT(S) AGE service/dev-nginx ClusterIP 10.96.133.249 \u0026lt;none\u0026gt; 8080/TCP 10s NAME READY UP-TO-DATE AVAILABLE AGE deployment.apps/dev-nginx 1/1 1 1 10s 會發現 configmap data 數量變成兩個\n確認一下功能是否符合預期\ncurl 10.96.133.249:8080/index.html curl 10.96.133.249:8080/index2.html this is index.html this is index2.html 想看更多範例，可以參考 kustomize repo 中 範例\n後記 用 kustomize 來進行管理感覺還不錯，透過不同的資料夾可以快速知道不同版本的差異\n 參考資料:\n https://kubernetes.io/docs/tasks/manage-kubernetes-objects/kustomization/ https://kubernetes.io/blog/2018/05/29/introducing-kustomize-template-free-configuration-customization-for-kubernetes/ https://kubectl.docs.kubernetes.io/references/kustomize/kustomization/ https://kustomize.io/  ","permalink":"https://newjett0617.github.io/posts/20210811-%E7%94%A8-kustomize-%E5%B0%8D-kubernetes-%E7%89%A9%E4%BB%B6%E9%80%B2%E8%A1%8C%E5%AE%A3%E5%91%8A%E5%BC%8F%E7%AE%A1%E7%90%86/","summary":"在 kubernetes 官網 中有看到一個用來管理 kubernetes 的工具，叫做 Kustomize，透過 kustomization 檔案來宣告式 ( Declarative) 管理 kubernetes 物件\n安裝 Kustomize 從 kubernetes 1.14 之後就有支援 kustomization 檔案\nkubectl kustomize DIR [flags] [options] DIR 目錄下，必須有 kustomization 檔案，名稱可以為下列三個其中一個\n kustomization.yaml kustomization.yml Kustomization  但是也可以獨立安裝 kustomize-cli，其他安裝方式請看 here\nbrew install kustomize Kustomize 工作原理 主要分成 base 及 overlays\nbase 會透過 kustomization 檔案定義使用的哪些 kubernetes 物件\noverlays 也會透過 kustomization 檔案定義要使用哪個 base，並在 base 上新增補丁 (Patch)，如果在 base 上有該資源的話就複寫，如果沒有的話就新增\n資料夾結構如下\n. ├── base │ ├── configMap.","title":"用 Kustomize 對 Kubernetes 物件進行宣告式管理"},{"content":"有時身為 root 使用者時，還是會有不小心誤刪檔案，以防被自己雷才有這篇 \u0026hellip;\n在 Linux 中有一個指令 chattr 可以改變檔案屬性；還有另外一個指令 lsattr 可以列出檔案屬性（檔案屬性並不是檔案權限，在 ls 中看不出來）\nattributes 屬性 總共有這些屬性，詳細請看手冊\na: append only A: no atime updates c: compressed C: no copy on write d: no dump D: synchronous directory updates e: extent format i: immutable j: data journalling P: project hierarchy s: secure deletion S: synchronous updates t: no tail-merging T: top of directory hierarchy u: undeletable 我自己常用的屬性是 a, i\na 屬性  只能以追加模式寫入檔案  i 屬性  不能被刪除、重新命名 不能建立 link 不能修改 metadata 不能寫入檔案  chattr 語法如下\nchattr [ -RVf ] [ -v version ] [ -p project ] [ +-=[attributes] ] files...  + : 是添加選定的屬性 - : 是移除選定的屬性 = : 是指定選定的屬性  後記 除了給予檔案屬性來保護外，另外也可以使用 safe-rm 來避免發生誤刪的情況\n","permalink":"https://newjett0617.github.io/posts/20210801-linux-%E4%B8%AD%E7%9A%84-chattr-%E5%8F%8A-lsattr-%E6%8C%87%E4%BB%A4/","summary":"有時身為 root 使用者時，還是會有不小心誤刪檔案，以防被自己雷才有這篇 \u0026hellip;\n在 Linux 中有一個指令 chattr 可以改變檔案屬性；還有另外一個指令 lsattr 可以列出檔案屬性（檔案屬性並不是檔案權限，在 ls 中看不出來）\nattributes 屬性 總共有這些屬性，詳細請看手冊\na: append only A: no atime updates c: compressed C: no copy on write d: no dump D: synchronous directory updates e: extent format i: immutable j: data journalling P: project hierarchy s: secure deletion S: synchronous updates t: no tail-merging T: top of directory hierarchy u: undeletable 我自己常用的屬性是 a, i\na 屬性  只能以追加模式寫入檔案  i 屬性  不能被刪除、重新命名 不能建立 link 不能修改 metadata 不能寫入檔案  chattr 語法如下","title":"Linux 中的 chattr 及 lsattr 指令"},{"content":"最近有收到需求是要將容器的日誌寫入 AWS CloudWatch 中，剛好 docker 的 logging drivers 有支援，紀錄一下過程\ndocker 預設的 logging driver 是 json-file，日誌檔案路徑在 /var/lib/docker/containers/\u0026lt;CONTAINER_ID\u0026gt;/\u0026lt;CONTAINER_ID\u0026gt;-json.log\n這是 docker 的 logging drivers 支援的清單 logging driver 可以單一容器設定，也可以全域設定 (修改 /etc/docker/daemon.json)\n下面關於 docker 的示範都是使用單一容器設定 logging driver\n直接使用 awslogs logging driver 沒有傳遞 AWS Credentials 而直接使用 awslogs logging driver 的話會有下面錯誤\n啟動容器\ndocker run --name test1 \\  --log-driver awslogs \\  --log-opt \u0026#34;awslogs-region=us-east-1\u0026#34; \\  --log-opt \u0026#34;awslogs-group=myLogGroup\u0026#34; \\  --log-opt \u0026#34;awslogs-stream=myLogStream\u0026#34; \\  busybox echo test1 查看一下狀態\ndocker container ls --all --filter name=test1 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES e8fea7f1ce76 busybox \u0026#34;echo test1\u0026#34; 7 seconds ago Created test1 發現無法啟動容器，容器的狀態是 Created，表示容器有成功從 Image 創建，但沒有成功啟動\n找出錯誤原因\ndocker container inspect test1 | jq \u0026#39;.[0].State.Error\u0026#39; failed to initialize logging driver: failed to create Cloudwatch log stream: NoCredentialProviders: no valid providers in chain. Deprecated. For verbose messaging see aws.Config.CredentialsChainVerboseErrors 設定 AWS CloudWatch Policy 因為日誌要寫入 AWS CloudWatch 中，需要有相對應的 Credentials 及 Policy\nPolicy 最少需要 logs:CreateLogStream logs:PutLogEvents 這兩個 action，下面是我的 policy 設定\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;logs:CreateLogStream\u0026#34;, // required \u0026#34;logs:PutLogEvents\u0026#34;, // required \u0026#34;logs:CreateLogGroup\u0026#34; // 如果沒有給 CreateLogGroup 的話，需要事先建立 log group ], \u0026#34;Resource\u0026#34;: [ \u0026#34;arn:aws:logs:*:*:*\u0026#34; ] } ] } 傳遞 AWS Credentials 參數給 docker daemon 有兩種方式傳遞 AWS Credentials\n 在 root 使用者家目錄下新增 AWS shared credentials file /root/.aws/credentials 新增 docker daemon 環境變數  下面過程是使用第二種方式\n新增環境變數 sudo mkdir -p /etc/systemd/system/docker.service.d cat \u0026lt;\u0026lt; EOF | sudo tee /etc/systemd/system/docker.service.d/override.conf [Service] Environment=\u0026#34;AWS_ACCESS_KEY_ID=\u0026lt;YOUR_AWS_ACCESS_KEY_ID\u0026gt;\u0026#34; Environment=\u0026#34;AWS_SECRET_ACCESS_KEY=\u0026lt;YOUR_AWS_SECRET_ACCESS_KEY\u0026gt;\u0026#34; EOF 或是執行 sudo systemctl edit docker.service 指令，會進入編輯器進行編輯，完成編輯後依然是寫入相同檔案，兩者是一樣的\n重新啟動 docker daemon sudo systemctl daemon-reload sudo systemctl restart docker.service 測試一下 docker run --name test1 \\  --log-driver awslogs \\  --log-opt \u0026#34;awslogs-region=us-east-1\u0026#34; \\  --log-opt \u0026#34;awslogs-group=myLogGroup\u0026#34; \\  --log-opt \u0026#34;awslogs-stream=myLogStream\u0026#34; \\  busybox echo test1 會在 CloudWatch 中看到 test1 的結果\n 參考資料:\n https://docs.docker.com/config/containers/logging/awslogs/ https://serverfault.com/questions/413397/how-to-set-environment-variable-in-systemd-service  ","permalink":"https://newjett0617.github.io/posts/20210429-docker-%E5%AE%B9%E5%99%A8%E6%97%A5%E8%AA%8C%E6%95%B4%E5%90%88-aws-cloudwatch/","summary":"最近有收到需求是要將容器的日誌寫入 AWS CloudWatch 中，剛好 docker 的 logging drivers 有支援，紀錄一下過程\ndocker 預設的 logging driver 是 json-file，日誌檔案路徑在 /var/lib/docker/containers/\u0026lt;CONTAINER_ID\u0026gt;/\u0026lt;CONTAINER_ID\u0026gt;-json.log\n這是 docker 的 logging drivers 支援的清單 logging driver 可以單一容器設定，也可以全域設定 (修改 /etc/docker/daemon.json)\n下面關於 docker 的示範都是使用單一容器設定 logging driver\n直接使用 awslogs logging driver 沒有傳遞 AWS Credentials 而直接使用 awslogs logging driver 的話會有下面錯誤\n啟動容器\ndocker run --name test1 \\  --log-driver awslogs \\  --log-opt \u0026#34;awslogs-region=us-east-1\u0026#34; \\  --log-opt \u0026#34;awslogs-group=myLogGroup\u0026#34; \\  --log-opt \u0026#34;awslogs-stream=myLogStream\u0026#34; \\  busybox echo test1 查看一下狀態","title":"Docker 容器日誌整合 AWS CloudWatch"},{"content":"準備工具 等等操作中會需要使用這些工具來完成\n Calibre Calibre 外掛程式 DeDRM Adobe Digital Editions  安裝 Calibre 由於我使用的是 macOS，因此直接透過 homebrew 套件管理工具來安裝\nbrew install --cask calibre 安裝外掛程式 教學 (如何安裝外掛及載入外掛)\n安裝 DeDRM 執行下面程式，會得到 DeDRM 外掛程式\nVERSION=$(curl -fsSL https://api.github.com/repos/apprenticeharper/DeDRM_tools/releases/latest | grep tag_name | cut -d\u0026#39;\u0026#34;\u0026#39; -f 4 | cut -c 2-) curl -fsSL \u0026#34;https://github.com/apprenticeharper/DeDRM_tools/releases/download/v${VERSION}/DeDRM_tools_${VERSION}.zip\u0026#34; -o dedrm.zip unzip dedrm.zip -d dedrm rm dedrm.zip 安裝 Adobe Digital Editions brew install --cask adobe-digital-editions 準備電子書 到 kobo 下載想要放入 kindle 的電子書，會得到 URLLink.acsm 檔案，嘗試使用 Adobe Digital Editions 執行該檔案，看檔案是否正常開啟及是否正常閱讀，沒問題的話就可以進到下一步驟\n進行轉檔 開啟 Calibre 並點擊加入書籍，書籍路徑在 /Users/\u0026lt;user\u0026gt;/Documents/Digital Editions 資料夾底下，把該本書籍載入後，選擇要的輸出格式後就可以進行轉檔了\n 參考資料:\n http://jdev.tw/blog/5383/kobo-ebook-to-kindle/comment-page-1 https://medium.com/akichy/%E7%AD%86%E8%A8%98-%E5%A6%82%E4%BD%95%E7%94%A8-kindle-%E9%96%B1%E8%AE%80-kobo-%E6%A8%82%E5%A4%A9-%E9%9B%BB%E5%AD%90%E6%9B%B8%E6%AA%94%E6%A1%88-5aa529b61203  ","permalink":"https://newjett0617.github.io/posts/20210309-%E7%94%A8-kindle-%E9%96%B1%E8%AE%80-kobo-%E9%9B%BB%E5%AD%90%E6%9B%B8/","summary":"準備工具 等等操作中會需要使用這些工具來完成\n Calibre Calibre 外掛程式 DeDRM Adobe Digital Editions  安裝 Calibre 由於我使用的是 macOS，因此直接透過 homebrew 套件管理工具來安裝\nbrew install --cask calibre 安裝外掛程式 教學 (如何安裝外掛及載入外掛)\n安裝 DeDRM 執行下面程式，會得到 DeDRM 外掛程式\nVERSION=$(curl -fsSL https://api.github.com/repos/apprenticeharper/DeDRM_tools/releases/latest | grep tag_name | cut -d\u0026#39;\u0026#34;\u0026#39; -f 4 | cut -c 2-) curl -fsSL \u0026#34;https://github.com/apprenticeharper/DeDRM_tools/releases/download/v${VERSION}/DeDRM_tools_${VERSION}.zip\u0026#34; -o dedrm.zip unzip dedrm.zip -d dedrm rm dedrm.zip 安裝 Adobe Digital Editions brew install --cask adobe-digital-editions 準備電子書 到 kobo 下載想要放入 kindle 的電子書，會得到 URLLink.acsm 檔案，嘗試使用 Adobe Digital Editions 執行該檔案，看檔案是否正常開啟及是否正常閱讀，沒問題的話就可以進到下一步驟","title":"用 Kindle 閱讀 Kobo 電子書"},{"content":"最近看到 這篇 提到 sudo 有安全性漏洞\n也看到 這篇 有提供指令可以檢查，看看是否受到此漏洞的影響\nsudoedit -s / sudoedit: /: not a regular file 自己檢測一下，發現居然是漏洞版本，看來需要更新套件了\n在 apt update 後可以看到有哪些套件是可更新的，剛好有看到 sudo 這個套件，那就來更新吧\nsudo apt update sudo apt list --upgradable | grep sudo sudo apt --only-upgrade install sudo 更新後再用指令檢查一下，結果符合預期\nusage: sudoedit [-AknS] [-r role] [-t type] [-C num] [-g group] [-h host] [-p prompt] [-T timeout] [-u user] file ...  參考資料:\n https://www.sudo.ws/alerts/unescape_overflow.html  ","permalink":"https://newjett0617.github.io/posts/20210130-%E6%9B%B4%E6%96%B0-linux-sudo-%E6%BC%8F%E6%B4%9E/","summary":"最近看到 這篇 提到 sudo 有安全性漏洞\n也看到 這篇 有提供指令可以檢查，看看是否受到此漏洞的影響\nsudoedit -s / sudoedit: /: not a regular file 自己檢測一下，發現居然是漏洞版本，看來需要更新套件了\n在 apt update 後可以看到有哪些套件是可更新的，剛好有看到 sudo 這個套件，那就來更新吧\nsudo apt update sudo apt list --upgradable | grep sudo sudo apt --only-upgrade install sudo 更新後再用指令檢查一下，結果符合預期\nusage: sudoedit [-AknS] [-r role] [-t type] [-C num] [-g group] [-h host] [-p prompt] [-T timeout] [-u user] file ...  參考資料:\n https://www.sudo.ws/alerts/unescape_overflow.html  ","title":"更新 Linux Sudo 漏洞"},{"content":"最近因為 Inoreader 的免費訂閱數量快到上限了，不想掏錢購買，思考有什麼類似的服務來解決我的問題，google 搜尋 self hosted rss 有一堆工具提供選擇，最後我挑了 Miniflux 來使用\n安裝 Miniflux 我是使用 docker 來架設，官方的 repo 中有提供 basic.yml 範例當作使用，就不多贅述了\n由於伺服器的架構不同，這是我自架 miniflux 的 repo\n後記 除了使用網頁外，Miniflux 還有提供 Fever API 可以串接，搭配使用 FeedMe 及 Reeder 這兩個 App 當作跨平台的閱讀器\n","permalink":"https://newjett0617.github.io/posts/20201223-%E7%94%A8-miniflux-%E8%87%AA%E6%9E%B6-rss-%E6%9C%8D%E5%8B%99/","summary":"最近因為 Inoreader 的免費訂閱數量快到上限了，不想掏錢購買，思考有什麼類似的服務來解決我的問題，google 搜尋 self hosted rss 有一堆工具提供選擇，最後我挑了 Miniflux 來使用\n安裝 Miniflux 我是使用 docker 來架設，官方的 repo 中有提供 basic.yml 範例當作使用，就不多贅述了\n由於伺服器的架構不同，這是我自架 miniflux 的 repo\n後記 除了使用網頁外，Miniflux 還有提供 Fever API 可以串接，搭配使用 FeedMe 及 Reeder 這兩個 App 當作跨平台的閱讀器","title":"用 Miniflux 自架 RSS 服務"},{"content":"最近有玩遊戲的需求，但是並沒有 Windows 作業系統的電腦，於是腦筋就動到我的工作機上，工作機是使用 macOS\n有人會問說「可以安裝雙系統」，但我覺得太麻煩了，因此打算使用 macOS 的硬體加上 Windows 作業系統的硬碟，在開機選單時選擇 Windows 作為開機硬碟，這樣就可以有 Windows 作業系統了\n剛好查到這篇 Medium，這篇寫的很棒也很詳細，順便記錄下實作的差異\n第一部分 第三點 打開 macOS 的 磁碟工具程式 後，將顯示方式選擇 顯示所有裝置，針對外接硬碟進行格式化，點擊 清除，格式選擇 MacOS 擴充格式（日誌式），架構選擇 GUID 分割區配置表，選擇完成後按下 清除 點擊 分割，點擊 ＋，由於我硬碟大小是 256 GB，打算切割 64 GB 的儲存空間當作儲存資料，其餘的儲存空間都當作 Windows 作業系統，輸入完大小後，格式選擇 ExFAT，按下 套用，按下 分割 第六點 在不同目錄執行指令跟 bootcamp.vmdk 的路徑有關，建議是在家目錄中執行，會得到 ~/bootcamp.vmdk\n第七點 在新增虛擬主機時，名稱跟之後的指令有關，建議名稱使用 WIN10\n第二部分 下載完成後，會得到一個 WindowsSupport 的資料夾，將該資料夾壓縮後會得到一個 WindowsSupport.zip 壓縮檔，把該壓縮檔丟到之前分割的 DATA 磁區（假如沒有看到的話，回到 磁碟工具程式 ，選擇 DATA 後點擊 裝載）\n補充 由於之後的操作都不會再需要 VirtualBox 了，記得清除之前操作產生的檔案\n順便附上 Medium 的螢幕截圖，備份用，以免好文之後找不到，哭哭\n click to see more  ","permalink":"https://newjett0617.github.io/posts/20201107-diy-wintogo/","summary":"最近有玩遊戲的需求，但是並沒有 Windows 作業系統的電腦，於是腦筋就動到我的工作機上，工作機是使用 macOS\n有人會問說「可以安裝雙系統」，但我覺得太麻煩了，因此打算使用 macOS 的硬體加上 Windows 作業系統的硬碟，在開機選單時選擇 Windows 作為開機硬碟，這樣就可以有 Windows 作業系統了\n剛好查到這篇 Medium，這篇寫的很棒也很詳細，順便記錄下實作的差異\n第一部分 第三點 打開 macOS 的 磁碟工具程式 後，將顯示方式選擇 顯示所有裝置，針對外接硬碟進行格式化，點擊 清除，格式選擇 MacOS 擴充格式（日誌式），架構選擇 GUID 分割區配置表，選擇完成後按下 清除 點擊 分割，點擊 ＋，由於我硬碟大小是 256 GB，打算切割 64 GB 的儲存空間當作儲存資料，其餘的儲存空間都當作 Windows 作業系統，輸入完大小後，格式選擇 ExFAT，按下 套用，按下 分割 第六點 在不同目錄執行指令跟 bootcamp.vmdk 的路徑有關，建議是在家目錄中執行，會得到 ~/bootcamp.vmdk\n第七點 在新增虛擬主機時，名稱跟之後的指令有關，建議名稱使用 WIN10\n第二部分 下載完成後，會得到一個 WindowsSupport 的資料夾，將該資料夾壓縮後會得到一個 WindowsSupport.zip 壓縮檔，把該壓縮檔丟到之前分割的 DATA 磁區（假如沒有看到的話，回到 磁碟工具程式 ，選擇 DATA 後點擊 裝載）\n補充 由於之後的操作都不會再需要 VirtualBox 了，記得清除之前操作產生的檔案\n順便附上 Medium 的螢幕截圖，備份用，以免好文之後找不到，哭哭","title":"DIY WinToGo"},{"content":"最近在 Linux 主機中 /var/log 資料夾底下發現有許多的 xxx.log.1, xxx.log.2 的檔案，好奇去查並記錄下來\n這些檔案是 log rotate 產生的檔案，主要功能是做日誌檔案的輪替\nlogrotate 設定檔 主要設定檔的路徑是在 /etc/logrotate.conf，會載入 /etc/logrotate.d/ 底下的檔案，根據設定檔進行 rotate\n執行 logrotate logrotate 預設會在每日的 crontab 中執行 (/etc/cron.daily/logrotate)，如果想要手動執行 logrotate 的話，可以直接呼叫 logrotate --force 指令，--force 是強制執行 rotate 檔案，可搭配 --debug 一起使用並觀察\nlogrotate 範例 在 /etc/logrotate.conf 檔案中定義 logrotate 的預設值，範例如下\n# 設定頻率對日誌檔做 rotate (hourly, daily, weekly, monthly, yearly) (hourly 需要改變 logrotate 的頻率) # weekly [weekday] \u0026lt;- default 0 (0 means Sunday, 1 means Monday, ... , 6 means Saturday) weekly # 日誌被 rotate 了 4 次後刪除舊日誌 rotate 4 # rotate 舊日誌文件後創建新日誌文件權限 # create [mode(octal)] [owner] [group]. create # 使用日期當作 rotate 文件的後綴 #dateext # 對日誌檔進行壓縮，預設使用 gzip 壓縮方式 compress # 載入其他設定檔進行 rotate include /etc/logrotate.d /var/log/wtmp { \u0026lt;= 針對 /var/log/wtmp 檔案的參數設定 missingok \u0026lt;= 如果缺少日誌檔案的話，繼續執行下一個而不噴錯誤訊息，對應的參數（nomissingok） monthly \u0026lt;= 一個月進行一次 rotate create 0664 root utmp \u0026lt;= 建立新檔案的權限與群組 rotate 1 \u0026lt;= 保留一個檔案 notifempty \u0026lt;= 如果日誌為空，則不 rotate 日誌 delaycompress \u0026lt;= 延後壓縮直到下一次進行 rotate } 更多關於 logrotate 的細節設定可看手冊\nman logrotate.conf ","permalink":"https://newjett0617.github.io/posts/20201105-linux-%E4%B8%AD%E7%9A%84-log-rotation/","summary":"最近在 Linux 主機中 /var/log 資料夾底下發現有許多的 xxx.log.1, xxx.log.2 的檔案，好奇去查並記錄下來\n這些檔案是 log rotate 產生的檔案，主要功能是做日誌檔案的輪替\nlogrotate 設定檔 主要設定檔的路徑是在 /etc/logrotate.conf，會載入 /etc/logrotate.d/ 底下的檔案，根據設定檔進行 rotate\n執行 logrotate logrotate 預設會在每日的 crontab 中執行 (/etc/cron.daily/logrotate)，如果想要手動執行 logrotate 的話，可以直接呼叫 logrotate --force 指令，--force 是強制執行 rotate 檔案，可搭配 --debug 一起使用並觀察\nlogrotate 範例 在 /etc/logrotate.conf 檔案中定義 logrotate 的預設值，範例如下\n# 設定頻率對日誌檔做 rotate (hourly, daily, weekly, monthly, yearly) (hourly 需要改變 logrotate 的頻率) # weekly [weekday] \u0026lt;- default 0 (0 means Sunday, 1 means Monday, ... , 6 means Saturday) weekly # 日誌被 rotate 了 4 次後刪除舊日誌 rotate 4 # rotate 舊日誌文件後創建新日誌文件權限 # create [mode(octal)] [owner] [group].","title":"Linux 中的 Log Rotation"},{"content":"最近在學習 Kubernetes 相關知識，需要建立 cluster 環境，開始學習時會建議使用單節點的 minikube 當作環境，但是有些功能是在單節點環境做不到，需要建立多節點環境進行測試，剛好有看到有人推薦 KIND (Kubernetes IN Docker)，這套工具可以快速建置多節點的環境\n安裝 KIND 環境中已經預設安裝 docker，接下來只要下載 KIND-cli\nbrew install kind KIND-cli autocomplete cat \u0026lt;\u0026lt; EOF \u0026gt;\u0026gt; ~/.zshrc # kind-cli autocomplete source \u0026lt;(kind completion zsh) EOF 建置 cluster 在 KIND 的 repo 中的有提供範例 config 設定 kind-example-config.yaml ，可以快速建立四個節點 (一個 control-plane 節點, 三個 workers 節點)\nkind create cluster --name mykind --config ./kind-example-config.yaml 刪除 cluster kind delete cluster --name mykind happy using kubernetes clusters \u0026hellip;\n","permalink":"https://newjett0617.github.io/posts/20201012-%E7%94%A8-kind-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0-kubernetes-cluster/","summary":"最近在學習 Kubernetes 相關知識，需要建立 cluster 環境，開始學習時會建議使用單節點的 minikube 當作環境，但是有些功能是在單節點環境做不到，需要建立多節點環境進行測試，剛好有看到有人推薦 KIND (Kubernetes IN Docker)，這套工具可以快速建置多節點的環境\n安裝 KIND 環境中已經預設安裝 docker，接下來只要下載 KIND-cli\nbrew install kind KIND-cli autocomplete cat \u0026lt;\u0026lt; EOF \u0026gt;\u0026gt; ~/.zshrc # kind-cli autocomplete source \u0026lt;(kind completion zsh) EOF 建置 cluster 在 KIND 的 repo 中的有提供範例 config 設定 kind-example-config.yaml ，可以快速建立四個節點 (一個 control-plane 節點, 三個 workers 節點)\nkind create cluster --name mykind --config ./kind-example-config.yaml 刪除 cluster kind delete cluster --name mykind happy using kubernetes clusters \u0026hellip;","title":"用 KIND 搭建本地 Kubernetes Cluster"},{"content":"在 Linux 中常常看到副檔名 .tar.gz 的檔案，紀錄一下過程\n打包檔案 副檔名包含 .tar 的檔案，都是使用 tar 指令進行打包，也代表未使用壓縮的檔案\n看一下怎麼打包檔案\ntar -c -v -f a.tar /etc -c, --create: create a new ARCHIVE -f, --file=ARCHIVE: use ARCHIVE file or device ARCHIVE -v, --verbose: verbosely list files processed 壓縮檔案 副檔名 .tar.gz 的檔案，是經過 gzip 壓縮後的 tar 檔案，可以縮寫成 .tgz\n看一下怎麼壓縮檔案，多一個參數 -z\ntar -c -z -v -f a.tar.gz /etc -z, --gzip Filter the archive through gzip(1) 解壓縮檔案 看一下怎麼解壓縮檔案，使用 -x 參數\ntar -x -v -f a.tar.gz -x, --extract Extract files from an archive ","permalink":"https://newjett0617.github.io/posts/20201004-linux-%E4%B8%AD%E7%9A%84-tar-%E6%8C%87%E4%BB%A4/","summary":"在 Linux 中常常看到副檔名 .tar.gz 的檔案，紀錄一下過程\n打包檔案 副檔名包含 .tar 的檔案，都是使用 tar 指令進行打包，也代表未使用壓縮的檔案\n看一下怎麼打包檔案\ntar -c -v -f a.tar /etc -c, --create: create a new ARCHIVE -f, --file=ARCHIVE: use ARCHIVE file or device ARCHIVE -v, --verbose: verbosely list files processed 壓縮檔案 副檔名 .tar.gz 的檔案，是經過 gzip 壓縮後的 tar 檔案，可以縮寫成 .tgz\n看一下怎麼壓縮檔案，多一個參數 -z\ntar -c -z -v -f a.tar.gz /etc -z, --gzip Filter the archive through gzip(1) 解壓縮檔案 看一下怎麼解壓縮檔案，使用 -x 參數\ntar -x -v -f a.","title":"Linux 中的 tar 指令"},{"content":"在 Linux 的 sed 版本是 GNU，在 macOS 的 sed 版本是 BSD，兩者在使用上略有不同，踩到這個雷，紀錄一下\n-i 參數的差異 最常見的就是 -i，如果沒有提供後綴，則原始文件將被覆蓋而不進行備份（in place）\n下面的指令在 macOS 中是可以執行的\ncat \u0026lt;\u0026lt; EOF \u0026gt; test.txt foo bar baz EOF sed -e \u0026#39;s/foo/bar/g\u0026#39; -i \u0026#39;\u0026#39; test.txt 但是在 Linux 中卻會噴錯 sed: can't read : No such file or directory\n在 Linux 中只需要使用 -i 即可\nsed -e \u0026#39;s/foo/bar/g\u0026#39; -i test.txt 更改 separator 另外一個技巧就是更換 separator s/regular expression/replacement/flags\n如果使用 / 當作 separator，在正規表示式中有用到 / 的地方，需要使用 \\ 跳脫，這會造成很難閱讀\necho \u0026#39;/home/example\u0026#39; | sed \u0026#39;s/\\/home\\/example/\\/usr\\/local\\/example/\u0026#39; 可以使用其他的 separator 來代替（|, #, @）\necho \u0026#39;/home/example\u0026#39; | sed \u0026#39;s|/home/example|/usr/local/example|\u0026#39; echo \u0026#39;/home/example\u0026#39; | sed \u0026#39;s#/home/example#/usr/local/example#\u0026#39; echo \u0026#39;/home/example\u0026#39; | sed \u0026#39;s@/home/example@/usr/local/example@\u0026#39; ","permalink":"https://newjett0617.github.io/posts/20200910-linux-%E4%B8%AD%E7%9A%84-sed-%E6%8C%87%E4%BB%A4/","summary":"在 Linux 的 sed 版本是 GNU，在 macOS 的 sed 版本是 BSD，兩者在使用上略有不同，踩到這個雷，紀錄一下\n-i 參數的差異 最常見的就是 -i，如果沒有提供後綴，則原始文件將被覆蓋而不進行備份（in place）\n下面的指令在 macOS 中是可以執行的\ncat \u0026lt;\u0026lt; EOF \u0026gt; test.txt foo bar baz EOF sed -e \u0026#39;s/foo/bar/g\u0026#39; -i \u0026#39;\u0026#39; test.txt 但是在 Linux 中卻會噴錯 sed: can't read : No such file or directory\n在 Linux 中只需要使用 -i 即可\nsed -e \u0026#39;s/foo/bar/g\u0026#39; -i test.txt 更改 separator 另外一個技巧就是更換 separator s/regular expression/replacement/flags\n如果使用 / 當作 separator，在正規表示式中有用到 / 的地方，需要使用 \\ 跳脫，這會造成很難閱讀","title":"Linux 中的 sed 指令"},{"content":"在設定 config 檔案時，第一次可能會用編輯器進行修改，但第二、三次就會用指令的方式進行修改\n常常遇到因為權限問題而沒辦法寫入檔案中，沒辦法指令化，範例如下\nsudo echo \u0026#39;foo\u0026#39; \u0026gt; /foo -bash: /foo: Permission denied 在 這篇 剛好有人問，因此紀錄一下\ntee tee 指令是從 standard input (stdin) 讀取並輸出 standard output (stdout) 和文件，同時「螢幕輸出」及「輸出檔案」\necho \u0026#39;foo\u0026#39; | sudo tee /foo 上面的方式會直接覆蓋掉檔案 /foo，如果想要追加寫入檔案的話，可以使用 -a 或 --append 參數 (類似於 \u0026gt;\u0026gt; 的方式)\necho \u0026#39;foo\u0026#39; | sudo tee -a /foo 如果不想要看到 tee 輸出在螢幕的內容，可以將 tee 的 stdout 丟到黑洞中 /dev/null\necho \u0026#39;foo\u0026#39; | sudo tee -a /foo \u0026gt; /dev/null ","permalink":"https://newjett0617.github.io/posts/20200809-linux-%E4%B8%AD%E7%9A%84-tee-%E6%8C%87%E4%BB%A4/","summary":"在設定 config 檔案時，第一次可能會用編輯器進行修改，但第二、三次就會用指令的方式進行修改\n常常遇到因為權限問題而沒辦法寫入檔案中，沒辦法指令化，範例如下\nsudo echo \u0026#39;foo\u0026#39; \u0026gt; /foo -bash: /foo: Permission denied 在 這篇 剛好有人問，因此紀錄一下\ntee tee 指令是從 standard input (stdin) 讀取並輸出 standard output (stdout) 和文件，同時「螢幕輸出」及「輸出檔案」\necho \u0026#39;foo\u0026#39; | sudo tee /foo 上面的方式會直接覆蓋掉檔案 /foo，如果想要追加寫入檔案的話，可以使用 -a 或 --append 參數 (類似於 \u0026gt;\u0026gt; 的方式)\necho \u0026#39;foo\u0026#39; | sudo tee -a /foo 如果不想要看到 tee 輸出在螢幕的內容，可以將 tee 的 stdout 丟到黑洞中 /dev/null\necho \u0026#39;foo\u0026#39; | sudo tee -a /foo \u0026gt; /dev/null ","title":"Linux 中的 tee 指令"},{"content":"在 Linux 中常常需要執行指令，在不知道指令或是參數之前都會看手冊\n使用 man 指令時，容易因為有相同名稱檔案或指令而導致看錯手冊\n舉個例子像是 passwd\npasswd 這同時有指令 /usr/bin/passwd 的手冊，也是檔案 /etc/passwd 的手冊\n這時需要查一下有哪些 manual\n查名稱有 passwd 的手冊 man -f passwd passwd (1) - change user password passwd (1ssl) - compute password hashes passwd (5) - the password file -f, --whatis: same as whatis(1). Search for all words in expression in manual page names only. 查名稱包含 passwd 的手冊 man -k passwd chgpasswd (8) - update group passwords in batch mode chpasswd (8) - update passwords in batch mode gpasswd (1) - administer /etc/group and /etc/gshadow grub-mkpasswd-pbkdf2 (1) - generate hashed password for GRUB mkpasswd (1) - Overfeatured front end to crypt(3) openssl-passwd (1ssl) - compute password hashes pam_localuser (8) - require users to be listed in /etc/passwd passwd (1) - change user password passwd (1ssl) - compute password hashes passwd (5) - the password file update-passwd (8) - safely update /etc/passwd, /etc/shadow and /etc/group -k, --apropos: same as apropos(1). Support the full expression syntax. The search is case-insensitive and matches whole words only. 手冊的章節 section 此時會顯示跟 passwd 相關的手冊，括號中的數字表示手冊的章節\n下面有所有章節的目錄\nManual Sections the sections of the manual are: (1) Executable programs or shell commands (2) System calls (functions provided by the kernel) (3) Library calls (functions within program libraries) (4) Special files (usually found in /dev) (5) File formats and conventions eg /etc/passwd (6) Games (7) Miscellaneous (including macro packages and conventions) (8) System administration commands (usually only for root) (9) Kernel routines [Non standard] 上述例子輸出關於 passwd 的結果，章節 1 是指令的手冊；章節 5 是檔案的手冊\n想看指令的手冊的話\nman 1 passwd 想看檔案的手冊的話\nman 5 passwd ","permalink":"https://newjett0617.github.io/posts/20200727-linux-%E4%B8%AD%E7%9A%84-man-%E6%8C%87%E4%BB%A4/","summary":"在 Linux 中常常需要執行指令，在不知道指令或是參數之前都會看手冊\n使用 man 指令時，容易因為有相同名稱檔案或指令而導致看錯手冊\n舉個例子像是 passwd\npasswd 這同時有指令 /usr/bin/passwd 的手冊，也是檔案 /etc/passwd 的手冊\n這時需要查一下有哪些 manual\n查名稱有 passwd 的手冊 man -f passwd passwd (1) - change user password passwd (1ssl) - compute password hashes passwd (5) - the password file -f, --whatis: same as whatis(1). Search for all words in expression in manual page names only. 查名稱包含 passwd 的手冊 man -k passwd chgpasswd (8) - update group passwords in batch mode chpasswd (8) - update passwords in batch mode gpasswd (1) - administer /etc/group and /etc/gshadow grub-mkpasswd-pbkdf2 (1) - generate hashed password for GRUB mkpasswd (1) - Overfeatured front end to crypt(3) openssl-passwd (1ssl) - compute password hashes pam_localuser (8) - require users to be listed in /etc/passwd passwd (1) - change user password passwd (1ssl) - compute password hashes passwd (5) - the password file update-passwd (8) - safely update /etc/passwd, /etc/shadow and /etc/group -k, --apropos: same as apropos(1).","title":"Linux 中的 man 指令"},{"content":"在 Linux 中會需要字串處理，學會 cut 指令可以幫助不少\ncut 在 /etc/passwd 中儲存了所有 Linux 帳號的登入資訊，每一行就是一筆資料，欄位有 login name, user id, group id \u0026hellip; 等等，並且用 : 分隔\n如果想要列出所有使用者的話，可以使用 cut 來辦到\ncut 處理的字串是以「行」為單位\nroot:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin cut -d \u0026#39;:\u0026#39; -f 1 /etc/passwd root bin daemon -d, --delimiter=DELIM use DELIM instead of TAB for field delimiter -f, --fields=LIST select only these fields 如果想要其他欄位的話，可以在 -f 參數後面加上\ncut -d \u0026#39;:\u0026#39; -f 1,3-4 /etc/passwd root:0:0 daemon:1:1 bin:2:2 後記 使用 cut 在處理多空格相連的資料時，會比較難判斷是第幾個 fields，應該有其他處理方式\n","permalink":"https://newjett0617.github.io/posts/20200612-linux-%E4%B8%AD%E7%9A%84-cut-%E6%8C%87%E4%BB%A4/","summary":"在 Linux 中會需要字串處理，學會 cut 指令可以幫助不少\ncut 在 /etc/passwd 中儲存了所有 Linux 帳號的登入資訊，每一行就是一筆資料，欄位有 login name, user id, group id \u0026hellip; 等等，並且用 : 分隔\n如果想要列出所有使用者的話，可以使用 cut 來辦到\ncut 處理的字串是以「行」為單位\nroot:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin cut -d \u0026#39;:\u0026#39; -f 1 /etc/passwd root bin daemon -d, --delimiter=DELIM use DELIM instead of TAB for field delimiter -f, --fields=LIST select only these fields 如果想要其他欄位的話，可以在 -f 參數後面加上\ncut -d \u0026#39;:\u0026#39; -f 1,3-4 /etc/passwd root:0:0 daemon:1:1 bin:2:2 後記 使用 cut 在處理多空格相連的資料時，會比較難判斷是第幾個 fields，應該有其他處理方式","title":"Linux 中的 cut 指令"},{"content":"scp 指令是在網路上主機之間複製文件的指令，使用 ssh 進行身份驗證、安全地數據傳輸檔案\nremote -\u0026gt; local scp user@remote_host:remote_file local_file local -\u0026gt; remote scp local_file user@remote_host:remote_file ","permalink":"https://newjett0617.github.io/posts/20190208-linux-%E4%B8%AD%E7%9A%84-scp-%E6%8C%87%E4%BB%A4/","summary":"scp 指令是在網路上主機之間複製文件的指令，使用 ssh 進行身份驗證、安全地數據傳輸檔案\nremote -\u0026gt; local scp user@remote_host:remote_file local_file local -\u0026gt; remote scp local_file user@remote_host:remote_file ","title":"Linux 中的 scp 指令"}]