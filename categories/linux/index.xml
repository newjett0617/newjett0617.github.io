<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>linux on Jett&#39;s Blog</title>
    <link>https://newjett0617.github.io/categories/linux/</link>
    <description>Recent content in linux on Jett&#39;s Blog</description>
    <image>
      <url>https://newjett0617.github.io</url>
      <link>https://newjett0617.github.io</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 01 Aug 2021 15:08:32 +0800</lastBuildDate><atom:link href="https://newjett0617.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Linux 中的 chattr 及 lsattr 指令</title>
      <link>https://newjett0617.github.io/posts/20210801-linux-%E4%B8%AD%E7%9A%84-chattr-%E5%8F%8A-lsattr-%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Sun, 01 Aug 2021 15:08:32 +0800</pubDate>
      
      <guid>https://newjett0617.github.io/posts/20210801-linux-%E4%B8%AD%E7%9A%84-chattr-%E5%8F%8A-lsattr-%E6%8C%87%E4%BB%A4/</guid>
      <description>有時身為 root 使用者時，還是會有不小心誤刪檔案，以防被自己雷才有這篇 &amp;hellip;
在 Linux 中有一個指令 chattr 可以改變檔案屬性；還有另外一個指令 lsattr 可以列出檔案屬性（檔案屬性並不是檔案權限，在 ls 中看不出來）
attributes 屬性 總共有這些屬性，詳細請看手冊
a: append only A: no atime updates c: compressed C: no copy on write d: no dump D: synchronous directory updates e: extent format i: immutable j: data journalling P: project hierarchy s: secure deletion S: synchronous updates t: no tail-merging T: top of directory hierarchy u: undeletable 我自己常用的屬性是 a, i
a 屬性  只能以追加模式寫入檔案  i 屬性  不能被刪除、重新命名 不能建立 link 不能修改 metadata 不能寫入檔案  chattr 語法如下</description>
    </item>
    
    <item>
      <title>更新 Linux Sudo 漏洞</title>
      <link>https://newjett0617.github.io/posts/20210130-%E6%9B%B4%E6%96%B0-linux-sudo-%E6%BC%8F%E6%B4%9E/</link>
      <pubDate>Sat, 30 Jan 2021 16:00:00 +0800</pubDate>
      
      <guid>https://newjett0617.github.io/posts/20210130-%E6%9B%B4%E6%96%B0-linux-sudo-%E6%BC%8F%E6%B4%9E/</guid>
      <description>最近看到 這篇 提到 sudo 有安全性漏洞
也看到 這篇 有提供指令可以檢查，看看是否受到此漏洞的影響
sudoedit -s / sudoedit: /: not a regular file 自己檢測一下，發現居然是漏洞版本，看來需要更新套件了
在 apt update 後可以看到有哪些套件是可更新的，剛好有看到 sudo 這個套件，那就來更新吧
sudo apt update sudo apt list --upgradable | grep sudo sudo apt --only-upgrade install sudo 更新後再用指令檢查一下，結果符合預期
usage: sudoedit [-AknS] [-r role] [-t type] [-C num] [-g group] [-h host] [-p prompt] [-T timeout] [-u user] file ...  參考資料:
 https://www.sudo.ws/alerts/unescape_overflow.html  </description>
    </item>
    
    <item>
      <title>Linux 中的 Log Rotation</title>
      <link>https://newjett0617.github.io/posts/20201105-linux-%E4%B8%AD%E7%9A%84-log-rotation/</link>
      <pubDate>Thu, 05 Nov 2020 15:27:07 +0800</pubDate>
      
      <guid>https://newjett0617.github.io/posts/20201105-linux-%E4%B8%AD%E7%9A%84-log-rotation/</guid>
      <description>最近在 Linux 主機中 /var/log 資料夾底下發現有許多的 xxx.log.1, xxx.log.2 的檔案，好奇去查並記錄下來
這些檔案是 log rotate 產生的檔案，主要功能是做日誌檔案的輪替
logrotate 設定檔 主要設定檔的路徑是在 /etc/logrotate.conf，會載入 /etc/logrotate.d/ 底下的檔案，根據設定檔進行 rotate
執行 logrotate logrotate 預設會在每日的 crontab 中執行 (/etc/cron.daily/logrotate)，如果想要手動執行 logrotate 的話，可以直接呼叫 logrotate --force 指令，--force 是強制執行 rotate 檔案，可搭配 --debug 一起使用並觀察
logrotate 範例 在 /etc/logrotate.conf 檔案中定義 logrotate 的預設值，範例如下
# 設定頻率對日誌檔做 rotate (hourly, daily, weekly, monthly, yearly) (hourly 需要改變 logrotate 的頻率) # weekly [weekday] &amp;lt;- default 0 (0 means Sunday, 1 means Monday, ... , 6 means Saturday) weekly # 日誌被 rotate 了 4 次後刪除舊日誌 rotate 4 # rotate 舊日誌文件後創建新日誌文件權限 # create [mode(octal)] [owner] [group].</description>
    </item>
    
    <item>
      <title>Linux 中的 tar 指令</title>
      <link>https://newjett0617.github.io/posts/20201004-linux-%E4%B8%AD%E7%9A%84-tar-%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Sun, 04 Oct 2020 11:59:30 +0800</pubDate>
      
      <guid>https://newjett0617.github.io/posts/20201004-linux-%E4%B8%AD%E7%9A%84-tar-%E6%8C%87%E4%BB%A4/</guid>
      <description>在 Linux 中常常看到副檔名 .tar.gz 的檔案，紀錄一下過程
打包檔案 副檔名包含 .tar 的檔案，都是使用 tar 指令進行打包，也代表未使用壓縮的檔案
看一下怎麼打包檔案
tar -c -v -f a.tar /etc -c, --create: create a new ARCHIVE -f, --file=ARCHIVE: use ARCHIVE file or device ARCHIVE -v, --verbose: verbosely list files processed 壓縮檔案 副檔名 .tar.gz 的檔案，是經過 gzip 壓縮後的 tar 檔案，可以縮寫成 .tgz
看一下怎麼壓縮檔案，多一個參數 -z
tar -c -z -v -f a.tar.gz /etc -z, --gzip Filter the archive through gzip(1) 解壓縮檔案 看一下怎麼解壓縮檔案，使用 -x 參數
tar -x -v -f a.</description>
    </item>
    
    <item>
      <title>Linux 中的 sed 指令</title>
      <link>https://newjett0617.github.io/posts/20200910-linux-%E4%B8%AD%E7%9A%84-sed-%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Thu, 10 Sep 2020 15:15:08 +0800</pubDate>
      
      <guid>https://newjett0617.github.io/posts/20200910-linux-%E4%B8%AD%E7%9A%84-sed-%E6%8C%87%E4%BB%A4/</guid>
      <description>在 Linux 的 sed 版本是 GNU，在 macOS 的 sed 版本是 BSD，兩者在使用上略有不同，踩到這個雷，紀錄一下
-i 參數的差異 最常見的就是 -i，如果沒有提供後綴，則原始文件將被覆蓋而不進行備份（in place）
下面的指令在 macOS 中是可以執行的
cat &amp;lt;&amp;lt; EOF &amp;gt; test.txt foo bar baz EOF sed -e &amp;#39;s/foo/bar/g&amp;#39; -i &amp;#39;&amp;#39; test.txt 但是在 Linux 中卻會噴錯 sed: can&#39;t read : No such file or directory
在 Linux 中只需要使用 -i 即可
sed -e &amp;#39;s/foo/bar/g&amp;#39; -i test.txt 更改 separator 另外一個技巧就是更換 separator s/regular expression/replacement/flags
如果使用 / 當作 separator，在正規表示式中有用到 / 的地方，需要使用 \ 跳脫，這會造成很難閱讀</description>
    </item>
    
    <item>
      <title>Linux 中的 tee 指令</title>
      <link>https://newjett0617.github.io/posts/20200809-linux-%E4%B8%AD%E7%9A%84-tee-%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Sun, 09 Aug 2020 15:32:11 +0800</pubDate>
      
      <guid>https://newjett0617.github.io/posts/20200809-linux-%E4%B8%AD%E7%9A%84-tee-%E6%8C%87%E4%BB%A4/</guid>
      <description>在設定 config 檔案時，第一次可能會用編輯器進行修改，但第二、三次就會用指令的方式進行修改
常常遇到因為權限問題而沒辦法寫入檔案中，沒辦法指令化，範例如下
sudo echo &amp;#39;foo&amp;#39; &amp;gt; /foo -bash: /foo: Permission denied 在 這篇 剛好有人問，因此紀錄一下
tee tee 指令是從 standard input (stdin) 讀取並輸出 standard output (stdout) 和文件，同時「螢幕輸出」及「輸出檔案」
echo &amp;#39;foo&amp;#39; | sudo tee /foo 上面的方式會直接覆蓋掉檔案 /foo，如果想要追加寫入檔案的話，可以使用 -a 或 --append 參數 (類似於 &amp;gt;&amp;gt; 的方式)
echo &amp;#39;foo&amp;#39; | sudo tee -a /foo 如果不想要看到 tee 輸出在螢幕的內容，可以將 tee 的 stdout 丟到黑洞中 /dev/null
echo &amp;#39;foo&amp;#39; | sudo tee -a /foo &amp;gt; /dev/null </description>
    </item>
    
    <item>
      <title>Linux 中的 man 指令</title>
      <link>https://newjett0617.github.io/posts/20200727-linux-%E4%B8%AD%E7%9A%84-man-%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Mon, 27 Jul 2020 13:36:06 +0800</pubDate>
      
      <guid>https://newjett0617.github.io/posts/20200727-linux-%E4%B8%AD%E7%9A%84-man-%E6%8C%87%E4%BB%A4/</guid>
      <description>在 Linux 中常常需要執行指令，在不知道指令或是參數之前都會看手冊
使用 man 指令時，容易因為有相同名稱檔案或指令而導致看錯手冊
舉個例子像是 passwd
passwd 這同時有指令 /usr/bin/passwd 的手冊，也是檔案 /etc/passwd 的手冊
這時需要查一下有哪些 manual
查名稱有 passwd 的手冊 man -f passwd passwd (1) - change user password passwd (1ssl) - compute password hashes passwd (5) - the password file -f, --whatis: same as whatis(1). Search for all words in expression in manual page names only. 查名稱包含 passwd 的手冊 man -k passwd chgpasswd (8) - update group passwords in batch mode chpasswd (8) - update passwords in batch mode gpasswd (1) - administer /etc/group and /etc/gshadow grub-mkpasswd-pbkdf2 (1) - generate hashed password for GRUB mkpasswd (1) - Overfeatured front end to crypt(3) openssl-passwd (1ssl) - compute password hashes pam_localuser (8) - require users to be listed in /etc/passwd passwd (1) - change user password passwd (1ssl) - compute password hashes passwd (5) - the password file update-passwd (8) - safely update /etc/passwd, /etc/shadow and /etc/group -k, --apropos: same as apropos(1).</description>
    </item>
    
    <item>
      <title>Linux 中的 cut 指令</title>
      <link>https://newjett0617.github.io/posts/20200612-linux-%E4%B8%AD%E7%9A%84-cut-%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Fri, 12 Jun 2020 16:31:49 +0800</pubDate>
      
      <guid>https://newjett0617.github.io/posts/20200612-linux-%E4%B8%AD%E7%9A%84-cut-%E6%8C%87%E4%BB%A4/</guid>
      <description>在 Linux 中會需要字串處理，學會 cut 指令可以幫助不少
cut 在 /etc/passwd 中儲存了所有 Linux 帳號的登入資訊，每一行就是一筆資料，欄位有 login name, user id, group id &amp;hellip; 等等，並且用 : 分隔
如果想要列出所有使用者的話，可以使用 cut 來辦到
cut 處理的字串是以「行」為單位
root:x:0:0:root:/root:/bin/bash bin:x:1:1:bin:/bin:/sbin/nologin daemon:x:2:2:daemon:/sbin:/sbin/nologin cut -d &amp;#39;:&amp;#39; -f 1 /etc/passwd root bin daemon -d, --delimiter=DELIM use DELIM instead of TAB for field delimiter -f, --fields=LIST select only these fields 如果想要其他欄位的話，可以在 -f 參數後面加上
cut -d &amp;#39;:&amp;#39; -f 1,3-4 /etc/passwd root:0:0 daemon:1:1 bin:2:2 後記 使用 cut 在處理多空格相連的資料時，會比較難判斷是第幾個 fields，應該有其他處理方式</description>
    </item>
    
    <item>
      <title>Linux 中的 scp 指令</title>
      <link>https://newjett0617.github.io/posts/20190208-linux-%E4%B8%AD%E7%9A%84-scp-%E6%8C%87%E4%BB%A4/</link>
      <pubDate>Fri, 08 Feb 2019 08:37:48 +0800</pubDate>
      
      <guid>https://newjett0617.github.io/posts/20190208-linux-%E4%B8%AD%E7%9A%84-scp-%E6%8C%87%E4%BB%A4/</guid>
      <description>scp 指令是在網路上主機之間複製文件的指令，使用 ssh 進行身份驗證、安全地數據傳輸檔案
remote -&amp;gt; local scp user@remote_host:remote_file local_file local -&amp;gt; remote scp local_file user@remote_host:remote_file </description>
    </item>
    
  </channel>
</rss>
